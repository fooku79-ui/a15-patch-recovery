name: RECOVERY

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: "Direct Google Drive download link (uc?export=download&id=...)"
        required: true
      IMAGE_NAME:
        description: "Base name for outputs (no extension)"
        required: false
        default: "patched-recovery"

jobs:
  patch-recovery:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            lz4 zip unzip tar coreutils p7zip-full git xz-utils gawk sed grep file curl openssl

      - name: Prepare workspace
        run: |
          set -euxo pipefail
          mkdir -p work/in work/out
          echo "${{ github.event.inputs.RECOVERY_URL }}" > work/URL.txt

      - name: Download and validate recovery image
        run: |
          set -euxo pipefail
          URL="$(cat work/URL.txt)"
          cd work/in
          echo "📥 Downloading: $URL"
          curl -L --fail --retry 4 --connect-timeout 20 "$URL" -o recovery.img

          echo "🔍 Checking file type..."
          file recovery.img | tee ../recovery.file.txt
          sha256sum recovery.img | tee ../recovery.sha256.txt

          # Decompress if LZ4
          case "$(file -b recovery.img)" in
            *LZ4*) 
              echo "🧩 Detected LZ4 compression. Decompressing..."
              lz4 -d -f recovery.img recovery.raw.img
              ;;
            *)
              echo "📦 No compression detected. Copying as-is..."
              cp -f recovery.img recovery.raw.img
              ;;
          esac

          echo "🔍 Validating decompressed image..."
          file recovery.raw.img | tee ../recovery.raw.file.txt
          file recovery.raw.img | grep -q 'Android boot image' || {
            echo "❌ Not a valid Android recovery image." >&2
            exit 2
          }

          # Replace original for downstream steps
          mv -f recovery.raw.img recovery.img

      - name: Clone AIK-Linux
        run: |
          set -euxo pipefail
          git clone --depth=1 https://${{ secrets.GITHUB_TOKEN }}@github.com/osm0sis/AIK-Linux.git work/AIK

      - name: Unpack recovery
        run: |
          set -euxo pipefail
          cd work/AIK
          cp -f ../in/recovery.img ./recovery.img
          bash cleanup.sh || true
          bash unpackimg.sh ./recovery.img
          test -d ramdisk || { echo "❌ Unpack failed: no ramdisk." >&2; exit 3; }

      - name: Patch recovery
        run: |
          set -euxo pipefail
          chmod +x scripts/enable_fastbootd.sh
          ./scripts/enable_fastbootd.sh work/AIK

      - name: Repack recovery
        run: |
          set -euxo pipefail
          cd work/AIK
          bash repackimg.sh
          test -f image-new.img
          mv -f image-new.img ../out/patched-recovery.img

      - name: Package outputs
        run: |
          set -euxo pipefail
          cd work/out
          BASENAME="${{ github.event.inputs.IMAGE_NAME }}"
          mv -f patched-recovery.img "${BASENAME}.img"
          tar --format=ustar -cf "${BASENAME}.tar" "${BASENAME}.img"
          md5sum -t "${BASENAME}.tar" | awk '{print $1}' > "${BASENAME}.tar.md5"
          cat "${BASENAME}.tar.md5" >> "${BASENAME}.tar"
          zip -9r "${BASENAME}.zip" "${BASENAME}.img" "${BASENAME}.tar"
          cp -f ../recovery.sha256.txt .
          cp -f ../recovery.file.txt   .

      - name: Upload patched recovery
        uses: actions/upload-artifact@v4
        with:
          name: Patched-Recovery
          path: work/out/*
          if-no-files-found: error

