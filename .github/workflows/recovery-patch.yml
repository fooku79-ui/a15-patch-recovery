name: RECOVERY

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: "Direct download URL to recovery.img or recovery.img.lz4"
        required: true
      IMAGE_NAME:
        description: "Base name for outputs (no extension). Defaults to 'patched-recovery'"
        required: false
        default: "patched-recovery"

jobs:
  patch-recovery:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            lz4 zip unzip tar coreutils p7zip-full git xz-utils gawk sed grep file

      - name: Prepare workspace
        run: |
          set -euxo pipefail
          mkdir -p work/in work/out
          echo "${{ github.event.inputs.RECOVERY_URL }}" > work/URL.txt

      - name: Download recovery
        run: |
          set -euxo pipefail
          URL="$(cat work/URL.txt)"
          cd work/in
          FNAME="$(basename "${URL%%\?*}")"
          [[ -z "$FNAME" || "$FNAME" = "/" ]] && FNAME="recovery.img"
          echo "Downloading: $URL -> $FNAME"
          curl -L --fail --retry 4 --connect-timeout 20 "$URL" -o "$FNAME"
          file "$FNAME"
          case "$FNAME" in
            *.lz4|*.LZ4) lz4 -d -f "$FNAME" recovery.img ;;
            *)           cp -f "$FNAME" recovery.img      ;;
          esac
          sha256sum recovery.img | tee ../recovery.sha256.txt
          file recovery.img       | tee ../recovery.file.txt

      - name: Fetch Android Image Kitchen (AIK)
        run: |
          set -euxo pipefail
          cd work
          git clone --depth=1 https://github.com/osm0sis/Android-Image-Kitchen.git AIK

      # --- Auto-detect where AIK scripts live (AIK/AIK-Linux or AIK/) ---
      - name: Unpack recovery with AIK
        run: |
          set -euxo pipefail
          cd work
          ls -la AIK || true
          if [ -d AIK/AIK-Linux ]; then
            AIK_SCRIPTS="AIK/AIK-Linux"
          elif [ -f AIK/unpackimg.sh ]; then
            AIK_SCRIPTS="AIK"
          else
            echo "Could not find AIK scripts (unpackimg.sh)" >&2
            find AIK -maxdepth 2 -type f -name "unpackimg.sh" -print || true
            exit 2
          fi
          echo "Using AIK scripts at: $AIK_SCRIPTS"
          cp -f in/recovery.img "$AIK_SCRIPTS/recovery.img"
          bash "$AIK_SCRIPTS/cleanup.sh" || true
          bash "$AIK_SCRIPTS/unpackimg.sh" "$AIK_SCRIPTS/recovery.img"
          test -d "$AIK_SCRIPTS/ramdisk" || { echo "Unpack failed: no ramdisk." >&2; exit 2; }
          echo "AIK_SCRIPTS=$AIK_SCRIPTS" >> "$GITHUB_ENV"

      - name: Run patch script
        run: |
          set -euxo pipefail
          : "${AIK_SCRIPTS:?AIK_SCRIPTS not set}"
          chmod +x scripts/enable_fastbootd.sh
          ./scripts/enable_fastbootd.sh "work/${AIK_SCRIPTS}"

      - name: Repack recovery with AIK
        run: |
          set -euxo pipefail
          : "${AIK_SCRIPTS:?AIK_SCRIPTS not set}"
          cd "work/${AIK_SCRIPTS}"
          bash repackimg.sh
          test -f image-new.img
          mv -f image-new.img ../../out/patched-recovery.img

      - name: Package outputs (IMG/TAR/ZIP)
        run: |
          set -euxo pipefail
          cd work/out
          BASENAME="${{ github.event.inputs.IMAGE_NAME }}"
          mv -f patched-recovery.img "${BASENAME}.img"
          tar --format=ustar -cf "${BASENAME}.tar" "${BASENAME}.img"
          md5sum -t "${BASENAME}.tar" | awk '{print $1}' > "${BASENAME}.tar.md5"
          cat "${BASENAME}.tar.md5" >> "${BASENAME}.tar"
          zip -9r "${BASENAME}.zip" "${BASENAME}.img" "${BASENAME}.tar"
          cp -f ../recovery.sha256.txt .
          cp -f ../recovery.file.txt   .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Patched-Recovery
          path: |
            work/out/*.img
            work/out/*.tar
            work/out/*.zip
            work/out/*sha256*.txt
            work/out/*file*.txt
          if-no-files-found: error
